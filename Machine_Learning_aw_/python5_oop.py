# -*- coding: utf-8 -*-
"""Python5-OOP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VxnWvH_SgIaPjkgF9lRFcG6TfTkKhxp2

# Python Basic 5
Object-Oriented Programming

Referensi Tambahan:
- https://docs.python.org/3.8/
- https://docs.python.org/id/3.8/tutorial/
- https://www.programiz.com/python-programming/object-oriented-programming

## Introduction to OOPs in Python

Python itu adalah sebuah bahasa pemrograman multi purpose dan multi paradigm, artinya python dapat men support berbagai pendekatan pemrograman.

Salah satu pendekatan yang populer, adalah Object Oriented Programming, atau pemrograman berorientasi objek. Nah selama ini, kita sebetulnya menggunakan pendekatan pemrograman prosedural. Bagaimana perbedaan antara paradigma pemrograman prosedural dengan yang berbasis objek?

Sebelumnya kita membahasa dulu apa itu objek. Jadi, objek itu memiliki dua karakteristik.

1. attributes
2. behavior

Mari kita lihat contohnya:

Parrot (burung beo) adalah sebuah objek,

name, age, color (nama, usia, warna) adalah atributnya
singing, dancing (menyanyi, menari) adalah behavior nya

Konsep dari OOP dalam python ini berfokus dalam pembuatan kode yang reusable (dapat digunakan kembali). Konsep ini juga dikenal dengan DRY (Don't Repeat Yourself).

Dalam python, konsep OOP memiliki beberapa prinsip dasar:

| Sifat   | Deskripsi   |
|---------------|---------------------------------------------------------------------------------|
| Inheritance   | Proses dalam menggunakan atribut dan behaviour dari class yang telah ada sebelumnya.   |
| Encapsulation | Menyembunyikan atribut dan behavior yang bersifat private dari kelas lainnya.                       |
| Polymorphism  | Sebuah konsep untuk menggunakan operasi yang sama dengan cara yang berbeda pada kelas lain. |

Konsep ini akan terlihat lebih mudah dalam prakteknya nanti

# Class

Class adalah sebuah blueprint untuk objek.

Kalau kita berbicara mengenai parrot (burung beo), blueprint atau desainnya, parrot tersebut akan memiliki nama, warna, ukuran, dll. Parrot juga nantinya bisa singing dan dancing. Oleh karena itu kita bisa membuat parrot menjadi sebuah kelas.

Untuk membuat kelas parrot yang sederhana kita bisa menuliskan kode berikut :

```python
class Parrot:
```

Kata kunci `class` diikuti dengan `Parrot` mendefinisikan blueprint dari class parrot. Blueprint ini nantinya akan di realisasikan dalam sebuah instance.

# Object / Instance

Sebuah objek (instance) adalah perwujudan dari sebuah class.

Contoh dari membuat sebuah objek (instance) adalah sebagai berikut:
```python
papi = Parrot()
```

Disini, `papi` adalah perwujudan `Parrot`

Sekarang coba kita lihat kode lengkap dari pembuatan objek dan class
"""

class Parrot:

    # class attribute
    species = "bird"

    # instance attribute
    # constructor
    def __init__(self, name, age):
        self.name = name
        self.age = age

# # instantiate the Parrot class
papi = Parrot("Papi", 3)
greeny = Parrot("Greeny", 5)

# access the class attributes
print("Papi is a " + papi.species)
print("Greeny is also a " + greeny.species)

# access the instance attributes
print(papi.name + " is " + str(papi.age) + " years old")
print(greeny.name + " is " + str(greeny.age) + " years old")

"""Dalam program diatas, kita baru saja membuat class dengan nama `Parrot`. Kemudian, kita mendifinisikan atribut dari parrot yaitu `name` dan `age`. Atribut merupakan karakteristik dari objek.

Kemudian, kita membuat instance, atau realisasi, atau perwujudan dari class `Parrot`. Disini `papi` dan `greeny` adalah instance-nya.

Kemudian, kita dapat mengakses atributnya melalui instance dengan diikuti tanda `.`

# Buatlah sebuah Objek bernama Siswa
yang memiliki atribut:
- nis
- nama
- alamat
- daftar mata pelajaran diambil
- daftar nilai dari mata pelajaran tersebut

atribut ini di deklarasikan di konstruktor.

Buatlah method untuk:
- Menampilkan detail siswa (`tampilkan()`)
- Mengisikan data ke `mapel` dan `n` dengan method `tambahNilai(mapel,n)`
- Menampilkan mata_pelajaran dan nilainya dengan method `tampilkanNilai()`
- Menampilkan rata-rata nilai dengan method `tampilkanRataNilai()`
"""

## Objek SIswa
class Siswa:

    def __init__(self, nis, nama, alamat):
        self.nis = nis
        self.nama = nama
        self.alamat = alamat
        self.__mata_pelajaran = []
        self.__nilai = []

    def tampilkan(self):
        print("="*20)
        print(self.nis,self.nama,self.alamat)
        self.tampilkanNilai()
        self.tampilkanRataNilai()
        print("="*20)

    def tambahNilai(self, mapel, n):
        self.__mata_pelajaran.append(mapel)
        self.__nilai.append(n)

    def tampilkanNilai(self):
        for i,j in enumerate(self.__mata_pelajaran):
            print(i+1, self.__mata_pelajaran[i],self.__nilai[i])

    def tampilkanRataNilai(self):
        jumlah = 0
        for n in self.__nilai:
            jumlah += n
        rata = jumlah / len(self.__nilai)
        print("Rata-Rata Nilai",rata)

class SiswaSMK(Siswa):

    def __init__(self, nis, nama, alamat, jurusan):
        self.jurusan = jurusan
        super().__init__(nis, nama, alamat)

    def tampilkan(self):
        print("="*20)
        print(self.nis,self.nama,self.alamat)
        super().tampilkanNilai()
        super().tampilkanRataNilai()
        print("Jurusan : ", self.jurusan)


mikael = Siswa("12345", "Mikael", "Semarang")
yosua = SiswaSMK("12346", "Yosua", "Jakarta", "Rekayasa Perangkat Lunak")

## tambah nilai
mikael.tambahNilai("Matematika", 98)
mikael.tambahNilai("IPA", 95)
mikael.tambahNilai("Bahasa Inggris", 100)

mikael.tampilkan()

yosua.tambahNilai("Pemrograman Web", 100)
yosua.tambahNilai("Networking 1", 100)
yosua.tampilkan()

#mikael.tampilkanNilai()
#mikael.tampilkanRataNilai()
#yosua.tampilkan()

"""### Instance variables

Dinamakan instance variable karena variabel tersebut adalah milik dari tiap instance/objek dari suatu kelas. Artinya, jika sebuah kelas memiliki instance variable dengan nama a, maka setiap instance dari kelas tersebut akan memiliki variabel a sendiri-sendiri.

Di dalam python, setiap variabel yang didefinisikan di dalam fungsi pada sebuah kelas (lewat variabel self), maka ia dikatakan instance variable.

### Class variables / Static Variable
Class variables / static variable adalah variabel statis yang jumlah copy-nya hanya ada satu saja selama aplikasi dijalankan.

Misal kita memiliki sebuah kelas, dan kelas tersebut memiliki seratus instance, tetap saja static variable dari kelas tersebut hanya ada satu saja di memori. Oleh karena itu, static variable juga sering dikenal dengan istilah class variable.

# Methods

Methods adalah function yang didefinisikan dalam sebuah class. Function ini seharusnya mendefinisikan behavior dari objeknya.
"""

class Parrot:

    # instance attributes
    def __init__(self, name, age):
        self.name = name
        self.age = age

    # instance method
    def sing(self, song):
        return "{} sings {}".format(self.name, song)

    def dance(self):
        return "{} is now dancing".format(self.name)

# instantiate the object


# call our instance methods

"""Dalam program diatas, kita mendefinisikan dua method yaitu `sing` dan `dance`. Mereka adalah `instance method` yang dipanggil pada instance objek yaitu `papi`.

#### Next >> LAB 3.4.1.12 The Timer class and other

# Inheritance / Pewarisan

Inheritance adalah sebuah cara untuk membuat class baru dengan menggunakan detail dari kelas lainnya. Kelas yang baru ini akan mewariskan atribut serta method yang sudah didefinisikan dari class utamanya. Kelas yang baru ini sering disebut dengan `child class` dan kelas yang digunakan detailnya sering disebut sebagai `parent class`.
"""

class Vehicle:
    pass

class LandVehicle(Vehicle):
    pass

class TrackedVehicle(LandVehicle):
    pass


for cls1 in [Vehicle, LandVehicle, TrackedVehicle]:
    for cls2 in [Vehicle, LandVehicle, TrackedVehicle]:
        print(cls1,cls2,issubclass(cls1, cls2), end="\r\n")
    print()

"""### How Python finds properties and methods
Now we're going to look at how Python deals with inheriting methods.

Take a look at the example in the editor. Let's analyze it:

- there is a class named `Super`, which defines its own constructor used to assign the object's property, named `name`.
- the class defines the `__str__()` method, too, which makes the class able to present its identity in clear text form.
- the class is next used as a base to create a subclass named `Sub`. The `Sub` class defines its own constructor, which invokes the one from the superclass. Note how we've done it: `Super.__init__(self, name)`.
- we've explicitly named the superclass, and pointed to the method to invoke `__init__()`, providing all needed arguments.
- we've instantiated one object of class `Sub` and printed it.

#### The code outputs:

`My name is Andy.`

Note: As there is no `__str__()` method within the `Sub` class, the printed string is to be produced within the `Super` class. This means that the `__str__()` method has been inherited by the `Sub` class.
"""

class Super:
    def __init__(self, name):
        self.name = name

    def __str__(self):
        return "My name is " + self.name + "."


class Sub(Super):
    def __init__(self, name):
        Super.__init__(self, name)


obj = Sub("Andy")

print(obj)

"""### Kasus Lain"""

# parent class
class Bird:

    def __init__(self):
        print("Bird is ready")

    def whoisThis(self):
        print("Bird")

    def swim(self):
        print("Swim faster")

# child class
class Penguin(Bird):

    def __init__(self):
        # call super() function
        super().__init__()
        print("Penguin is ready")

    def whoisThis(self):
        print("Penguin")

    def run(self):
        print("Run faster")

peggy = Penguin()
peggy.whoisThis()
peggy.swim()
peggy.run()

"""Hal penting yang dapat diperhatikan:
- Bird adalah parent class dari Penguin dengan sintaks `Penguin(Bird)`. Relasi pewarisan ini harus di validasi dengan hubungan "is a". Contohnya Penguin is a Bird merupakan valid karena Penguin adalah termasuk Bird.
- `super().__init__()` memanggil konstruktor dari kelas parent nya
- method `whoisThis()` yang ditulis ulang di `Penguin` akan menimpa atau override method yang sudah ada di parent class (`Bird`).
- method swim dapat dipanggil oleh instance dari `Penguin` karena `Penguin` sudah mewarisi seluruh method yang ada pada kelas `Bird`.

# Encapsulation

Kita dapat membatasi akses atribut dan method dalam sebuah kelas dengan memanfaatkan sifat private yang di definisikan dengan garis bawah atau underscore single `_` atau double `__`
"""

class Rekening:
    def __init__(self):
        self.__saldo = 0

    def kredit(self, jumlah):
        if jumlah < 0:
            print("Gagal Kredit, Jumlah tidak bisa kurang dari 0")
            return

        self.__saldo += jumlah

    def debit(self, jumlah):
        if jumlah > self.__saldo:
            print("Gagal Debit, Jumlah melebihi Saldo!")
            return

        if jumlah < 0:
            print("Gagal Debit, Jumlah tidak bisa kurang dari 0")
            return

        self.__saldo -= jumlah

    def cetakSaldo(self):
        print("Saldo saat ini " + str(self.__saldo))

bniBudi = Rekening()

bniBudi.kredit(1000)
bniBudi.cetakSaldo()
bniBudi.debit(100000)

"""Pada program diatas, atribut `saldo` bersifat private karena kita memberikan underscore `__saldo`. Oleh karena itu, kita tidak bisa meruba nya secara langsung seperti dengan sintaks `c.__saldo = 1000`. Pada umumnya, atribut private ini dapat kita rubah dengan melewatkan pada sebuah method yang publik. Dalam hal ini method tersebut adalah `kredit()` dan `debit()`.

# contoh stack

<img src="images/stack.PNG" width=200 />

Lihat kode dengan paradigma prosedural berikut:
"""

stack = []

def push(val):
    stack.append(val)


def pop():
    val = stack[-1]
    del stack[-1]
    return val

push(3)
push(2)
push(1)

print(pop())
print(pop())
print(pop())

"""### Pertama buat atributnya"""

class Stack:
    def __init__(self):
        self.stackList = []

stackObject = Stack()
print(len(stackObject.stackList))



"""### Kemudian ubah atributnya menjadi private"""

class Stack:
    def __init__(self):
        self.__stackList = [] # __ membuat private

    def get_stack_len(self):
        return len(self.__stackList)

stackObject = Stack()
print(stackObject.get_stack_len()) # Call the method to get the length

"""### Tambahkan method push dan pop nya"""

class Stack:
    def __init__(self):
        self.__stackList = []

    def push(self, val):
        self.__stackList.append(val)

    def pop(self):
        val = self.__stackList[-1]
        del self.__stackList[-1]
        return val


stackObject = Stack()

stackObject.push(3)
stackObject.push(2)
stackObject.push(1)

print(stackObject.pop())
print(stackObject.pop())
print(stackObject.pop())

"""### Contoh dengan beberapa Instance"""

class Stack:
    def __init__(self):
        self.__stackList = []

    def push(self, val):
        self.__stackList.append(val)

    def pop(self):
        val = self.__stackList[-1]
        del self.__stackList[-1]
        return val

littleStack = Stack()
anotherStack = Stack()
funnyStack = Stack()

littleStack.push(1)
anotherStack.push(littleStack.pop() + 1)
funnyStack.push(anotherStack.pop() - 2)

print(funnyStack.pop())

"""### Inheritance"""

class Stack:
    def __init__(self):
        self.__stackList = []

    def push(self, val):
        self.__stackList.append(val)

    def pop(self):
        val = self.__stackList[-1]
        del self.__stackList[-1]
        return val


class AddingStack(Stack):
    def __init__(self):
        Stack.__init__(self)
        self.__sum = 0

    def getSum(self):
        return self.__sum

    def push(self, val):
        self.__sum += val
        Stack.push(self, val)

    def pop(self):
        val = Stack.pop(self)
        self.__sum -= val
        return val


stackObject = AddingStack()

for i in range(5):
    stackObject.push(i)
print(stackObject.getSum())

for i in range(5):
    print(stackObject.pop())

"""### Contoh lain"""

class Siswa:
    #class atribut
    __jmlMapel = 0
    __mapel = []
    __nilai = []

    def __init__(self, nama, alamat):
        self.nama = nama
        self.alamat = alamat

    def getNama(self):
        return self.nama

    def tambahNilaiMapel(self,mapel,nilai):
        self.__mapel.append(mapel)
        self.__nilai.append(nilai)

    def cetakNilai(self):
        for i,j in enumerate(self.__mapel):
            print(self.__mapel[i], self.__nilai[i])


s = Siswa("Guntur","Jogja")
print(s.nama) # boleh karena publik
print(s.getNama()) # bisa juga
s.tambahNilaiMapel("Matematika",90)
s.tambahNilaiMapel("Biologi",80)

s.cetakNilai() # akses nilai hanya lewat sini

# print(s.nilai) # ga boleh karena private
# print(s.__nilai) # ga boleh karena private

"""## Latihan OOP
![Circle Class](https://i.pinimg.com/originals/e2/e0/b8/e2e0b845017353dc3b614de2c30ccab4.png)


"""

import math
class Circle:
    def __init__(self, radius, color):
        self.__radius = radius
        self.__color = color

    def getRadius(self):
        return self.__radius

    def setRadius(self,radius):
        self.__radius = radius

    def getColor(self):
        return self.__color

    def setColor(self,color):
        self.__color = color

    def getArea(self):
        return math.pi * self.__radius ** 2


# radius = 2, color = blue
c1 = Circle(2,"blue")
# c1.setRadius(2)
# c1.setColor("blue")
print(c1.getArea())

# radius = 2, color = red
c2 = Circle(2,"red")
# c2.setRadius(2)
# c2.setColor("red")
print(c2.getArea())

# radius = 1, color = red
c3 = Circle(1,"red")
# c3.setRadius(1)
# c3.setColor("red")
print(c3.getArea())

"""![Student Class](https://1.bp.blogspot.com/-u4BocN8-Hf0/YEI99UiIR1I/AAAAAAAARhI/t56mJ3tAxhc-azHK-z1_XJOeqdTx5723QCLcBGAsYHQ/s642/ClassDiagram_Student.png)"""

class Student:
    def __init__(self, name, address):
        self.name = name
        self.address = address
        self.courses = {}

    def addCourseGrade(self, course, grade):
        self.courses[course] = grade

    def printGrades(self):
        for course, grade in self.courses.items():
            print(f"{course}: {grade}")

    def getAverageGrade(self):
        if len(self.courses) == 0:
            return 0
        return sum(self.courses.values()) / len(self.courses)

    def getName(self):
        return self.name

    def getAddress(self):
        return self.address

# Input jumlah siswa dan mata pelajaran
n_siswa = int(input("Masukkan Jumlah Siswa = "))
n_course = int(input("Masukkan Jumlah Course = "))

siswa = []
for i in range(n_siswa):
    nama = input("Masukkan Nama Siswa = ")
    alamat = input("Masukkan Alamat Siswa = ")
    siswa.append(Student(nama, alamat))

    for j in range(n_course):
        mapel = input(f"Masukkan Nama Mapel Siswa {nama} = ")

        # Ensure the input is a valid integer
        while True:
            try:
                nilai = int(input(f"Masukkan Nilai Mapel Siswa {nama} = "))
                break  # Exit the loop if input is valid
            except ValueError:
                print("Input tidak valid. Masukkan nilai berupa angka.")

        siswa[i].addCourseGrade(mapel, nilai)

# Menampilkan hasil
print("\nHasil")
for i in range(n_siswa):
    print(f"Nama: {siswa[i].getName()}, Alamat: {siswa[i].getAddress()}")
    siswa[i].printGrades()
    print(f"Rata-Rata: {siswa[i].getAverageGrade():.2f}\n")

# s1 = Student("Ani","Yogyakarta")
# print(s1.getName(),s1.getAddress())
# s1.addCourseGrade("Matematika",95)
# s1.addCourseGrade("IPA",90)
# s1.addCourseGrade("Bahasa Indonesia",85)
# s1.printGrades()
# print("Rata-Rata : ", s1.getAverageGrade())

# print()
# s2 = Student("Budi","Jakarta")
# print(s2.getName(),s2.getAddress())
# s2.addCourseGrade("Matematika",60)
# s2.addCourseGrade("IPA",70)
# s2.addCourseGrade("Bahasa Indonesia",100)
# s2.printGrades()
# print("Rata-Rata : ", s2.getAverageGrade())

"""![Employee.png](attachment:Employee.png)"""

class Employee:
    def __init__(self,idEmp,firstName,lastName,salary):
        self.__idEmp = idEmp
        self.__firstName = firstName
        self.__lastName = lastName
        self.__salary = salary

    def getID(self):
        return self.__idEmp

    def getFirstName(self):
        return self.__firstName

    def getLastName(self):
        return self.__lastName

    def getName(self):
        return self.__firstName + " " + self.__lastName

    def getSalary(self):
        return self.__salary

    def setSalary(self,salary):
        self.__salary = salary

    def getAnnualSalary(self):
        return self.__salary * 12

    def raiseSalary(self,percent):
        self.__salary += self.__salary * (percent/100)
        return self.__salary

    def __str__(self):
        return self.getName() + " " + str(self.getSalary())


class Manager(Employee):
    def __init__(self,idEmp,firstName,lastName,salary,bonus):
        super().__init__(idEmp,firstName,lastName,salary)
        self.__bonus = bonus

    def setBranch(self, branch):
        self.__branch = branch

    def getBranch(self, branch):
        return self.__branch

    def getBonus(self, bonus):
        return self.__bonus

    def setBonus(self, bonus):
        self.__bonus = bonus

    def getAnnualSalary(self):
        return super().getSalary() * 12 + self.__bonus


m1 = Manager(1234,"Guntur","Budi",5000,9000)
print(m1.getName())
print(m1.getAnnualSalary())

# e1 = Employee(1234,"Guntur","Budi",5000)
# print(e1.getSalary())
# print(e1.getAnnualSalary())
# print(e1.raiseSalary(50))
# print(e1.getAnnualSalary())
# print(e1)

"""![turunan people](https://i.warosu.org/data/g/img/0546/66/1463830198319.png)"""

class Person:
    def __init__(self,name,address):
        self.__name = name
        self.__address = address

    def getName(self):
        return self.__name

    def getAddress(self):
        return self.__address

    def setName(name):
        self.__name = name

    def __str__(self):
        return self.__name+" "+self.__address

class Student(Person):
    def __init__(self,name,address):
        super().__init__(name,address)
        self.__numCourses = 0
        self.__courses = []
        self.__grades = []

    def addCourseGrade(self,course,grade):
        self.__courses.append(course)
        self.__grades.append(grade)
        self.__numCourses += 1

    def printGrades(self):
        for i in range(len(self.__courses)):
            print(self.__courses[i] +" : "+ str(self.__grades[i]))

    def getAverageGrade(self):
        sum = 0
        for n in self.__grades:
            sum += n
        return sum / len(self.__grades)

    def __str__(self):
        return "Student: " + super().getName() + " " +super().getAddress()

class Teacher(Person):
    def __init__(self,name,address):
        super().__init__(name,address)
        self.__numCourses = 0
        self.__courses = []

    def addCourse(self, course):
        if course not in self.__courses:
            self.__courses.append(course)
            return True
        else:
            return False

    def removeCourse(self, course):
        if course in self.__courses:
            i = self.__courses.index(course)
            del self.__courses[i]
            return True
        else:
            return False

    def printCourse(self):
        print(self.__courses)

    def __str__(self):
        return "Teacher: " + super().getName() + " " +super().getAddress()

t1 = Teacher("Pak Budi","Jakarta")
print(t1)

t1.addCourse("Matematika")
t1.addCourse("Fisika")

t1.printCourse()
if(t1.removeCourse("Biologi")):
    print("Berhasil Dihapus")
else:
    print("Gagal Dihapus")
t1.printCourse()